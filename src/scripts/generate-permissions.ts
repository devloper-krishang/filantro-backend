// import { PermissionType } from '@/models/role'; // ‚úÖ This line is REQUIRED
// import path from 'path';
// import fs from 'fs';
// import mongoose from 'mongoose';
// import { Module } from '@/models/module';
// import { Submodule } from '@/models/submodule';
// import { Permission } from '@/models/permission';
// import env from '@/config/env';

// // 1. Connect to DB
// async function connectDB() {
//   const MONGO_URI = env.mongoose.url || 'mongodb://localhost:27017/permission';
//   await mongoose.connect(MONGO_URI);
// }

// // 2. Generate the permission registry
// async function generateRegistry() {
//   const modules = await Module.find().lean();
//   const submodules = await Submodule.find().lean();
//   const permissions = await Permission.find().populate('permissionTypeId').lean();

//   const grouped: Record<string, Record<string, Record<string, string>>> = {};

//   for (const mod of modules) {
//     const modName = mod.name;
//     grouped[modName] = {};
//     const modSubmodules = submodules.filter((sm) => sm.moduleId.toString() === mod._id.toString());

//     for (const sub of modSubmodules) {
//       const subName = sub.name;
//       const perms = permissions.filter((p) => p.submoduleId.toString() === sub._id.toString());

//       grouped[modName][subName] = {};
//       for (const perm of perms) {
//         const permLabel = (perm.permissionTypeId as any)?.name;
//         grouped[modName][subName][permLabel] = perm.key;
//       }
//     }
//   }

//   return grouped;
// }

// // 3. Write to file
// function writeToFile(registry: Record<string, any>) {
//   const filePath = path.join(__dirname, '../config/permissionsRegistry.ts');

//   const flattenKeys = Object.values(registry)
//     .flatMap((mod) => Object.values(mod).flatMap((sub: any) => Object.values(sub)))
//     .map((key) => `'${key}'`)
//     .join(' | ');

//   const content = `
// // Auto-generated by generate-permissions.ts ‚Äî Do not edit manually

// export const Permissions = ${JSON.stringify(registry, null, 2)} as const;

// export type PermissionKey = ${flattenKeys || 'never'};
// export type ModuleNames = keyof typeof Permissions;
// export type SubmoduleNames<M extends ModuleNames> = keyof typeof Permissions[M];
// export type SubPermissions<M extends ModuleNames, S extends SubmoduleNames<M>> = keyof typeof Permissions[M][S];
// `;

//   fs.writeFileSync(filePath, content.trim());
// }

// // 4. Run the script
// (async () => {
//   try {
//     console.log('üîÑ Generating permissions registry...');
//     await connectDB();

//     // ‚úÖ Force import to register model in Mongoose before population
//     await import('@/models/role');

//     const registry = await generateRegistry();
//     writeToFile(registry);
//     console.log('‚úÖ permissionsRegistry.ts generated successfully');
//     process.exit(0);
//   } catch (err) {
//     console.error('‚ùå Failed to generate permissions registry:', err);
//     process.exit(1);
//   }
// })();
